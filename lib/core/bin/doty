#!/bin/bash

ROOT_DIR="$(realpath -L -- "$(dirname -- "$0")/../../..")"
BACKUP_DIR="$ROOT_DIR/var/bak/$(date +%s)"
PATH_CAHCE_FILE="$ROOT_DIR/var/bash/paths"
SOURCES_CACHE_FILE="$ROOT_DIR/var/bash/sources"

cache=()

# 1 - ERROR
# 2 - WARNING
# 3 - INFO
# 4 - DEBUG
LOG_LEVEL=3


main() {
    if [[ "$*" = *" -v"* ]]; then
        LOG_LEVEL=4
    fi

    case $1 in
        install)
            cmd_install
            ;;
        *)
            print_help
            ;;
    esac
}

cmd_install() {
    cd "$ROOT_DIR"

    mkdir -p "$ROOT_DIR/var/bash" "$ROOT_dir/usr/bin"

    set_symlinks
    cache_paths
    cache_sources
}

print_help() {
    echo "Doty framework manager"
    echo ""
    echo "Usage:"
    echo "  ${0##*/} [options] <command>"
    echo ""
    echo "Options:"
    echo "  -v        verbose output"
    echo ""
    echo "Commands:"
    echo "  install   integrate into system and refresh cache"
}

set_symlinks() {
    local source
    local target
    local entries
    for module in $(list_modules); do
        readarray -t entries < <(
            get_module_config $module \
            | awk '/^link /' \
            | cut -d\  -f2-
        )

        for entry in "${entries[@]}"; do
            source="$(echo "$entry" | cut -d\  -f1 )"
            target="$(echo "$entry" | cut -d\  -f2- | xargs)"
            target="$(parse_doty_mod_path --relative-root "$target" "$module")"

            set_symlink "$HOME/$source" "$target" "$module"
        done
    done
}

get_module_config() {
    local module="$1"
    local config="$ROOT_DIR/lib/$module/doty.mod"

    [ -f "$config" ] && cat "$config"
}

get_module_local_path() {
    local module="$1"

    echo "lib/$module"
}

cache_paths() {
    local path
    local paths

    log debug cache_paths Path cache reset
    : > $PATH_CAHCE_FILE

    for module in $(list_modules); do
        readarray -t paths < <(
            echo bin \
            && get_module_config $module \
            | awk '/^path /' \
            | cut -d\  -f2-
        )

        for path in "${paths[@]}"; do
            path="$(parse_doty_mod_path "$path" "$module")"
            cache_paths_add "$path" "$module"
        done
    done
}

cache_paths_add() {
    local path="$1"
    local module="$2"

    if [ -d "$path" ]; then
        log info "bash.path@$module" "register $path"
        echo "$path" >> "$ROOT_DIR/var/bash/paths"
    else
        log warn "bash.path@$module" "invalid path $path"
    fi
}

cache_sources() {
    local source
    log debug "bash.sources" wiping cache file "$SOURCES_CACHE_FILE"
    : > "$SOURCES_CACHE_FILE"
    for module in $(list_modules); do
        get_module_config $module \
        | awk '/^source /' \
        | cut -d\  -f2- \
        | while read -r source; do
            source="$(parse_doty_mod_path "$source" "$module")"
            log info "bash.sources@$module" "register $source"
            echo "$source" >> "$SOURCES_CACHE_FILE"
        done
    done
}

parse_doty_mod_path() {
    local home_prefix="$HOME/dotfiles"
    if [ "$1" = --relative-root ]; then
        shift
        home_prefix="dotfiles"
    fi
    local path="$1"
    local module="$2"

    case $path in
        "\$ROOT")
            path="$ROOT_DIR"
            ;;
        "\$ROOT/"*)
            path="$home_prefix/${path/\$ROOT\//}"
            ;;
        "\$HOME/"*)
            path="$HOME/${path/\$HOME\//}"
            ;;
        /*)
            :
            ;;
        *)
            path="$home_prefix/$(get_module_local_path $module)/$path"
    esac
    echo "$path"
}

set_symlink() {
    local source="$1"
    local target="$2"
    local module="$3"

    log debug "symlink@$module" "$source => $target"

    if [ -L "$source" ]; then
        local value="$(readlink "$source")"
        if [ "$value" = "$target" ]; then
            log info "symlink@$module" "skipped $source -> $target"
        else
            confirm "$source is link to $value. Overwrite it to target $target?" \
            && ln -snf "$target" "$source" \
            && log info "symlink@$module" "updated $source -> $target"
        fi
    elif [ -f "$source" ]; then
        confirm "$source is a file. Overwrite?" && {
            archive "$source"
            ln -snf "$target" "$source"
            log info "symlink@$module" "overwritten file $source -> $target. Backup saved to $BACKUP_DIR."
        }
    elif [ -d "$source" ]; then
        confirm "$source is a directory. Overwrite?" && {
            archive "$source"
            ln -snf "$target" "$source"
            log info "symlink@$module" "overwritten directory $source -> $target. Backup saved to $BACKUP_DIR."
        }
    else
        ln -snf "$target" "$source"
        log info "symlink@$module" "created $source -> $target"
    fi
}

archive() {
    mkdir -p $BACKUP_DIR
    mv -t $BACKUP_DIR "$@"
}

confirm() {
    local msg=${1:-Proceed?}
    read -p "> $msg [yn] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        return 1
    fi
}

list_modules() {
    if [ -z "${cache[modules]}" ]; then
        cache[modules]=$(ls -d1 lib/*/ | xargs -n1 basename)
    fi

    echo "${cache[modules]}"
}

log() {
    # Black        0;30     Dark Gray     1;30
    # Red          0;31     Light Red     1;31
    # Green        0;32     Light Green   1;32
    # Brown/Orange 0;33     Yellow        1;33
    # Blue         0;34     Light Blue    1;34
    # Purple       0;35     Light Purple  1;35
    # Cyan         0;36     Light Cyan    1;36
    # Light Gray   0;37     White         1;37
    local level="$1"
    local context="$2"
    shift 2
    local message="$*"

    case "$level" in
        debug) level=4 ;;
        info)  level=3 ;;
        warn)  level=2 ;;
        error) level=1 ;;
    esac

    [ "$LOG_LEVEL" -ge "$level" ] \
    && echo -e "\033[0;36m$context\033[0m: $message"
}

main "$@"
